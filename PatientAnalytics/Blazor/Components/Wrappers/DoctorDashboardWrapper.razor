@inject IStringLocalizer<Localized> Localized
@inject PatientAnalyticsAuthStateProvider PatientAnalyticsAuthStateProvider
@inject NavigationManager NavigationManager

<AuthorizeView Roles="Doctor">
    <Authorized>
        <section class="is-flex is-flex-direction-row is-justify-content-space-between mb-4">
            <div class="container">
                <h1 class="title mb-2">@Localized["AppTitle"]</h1>
                <h4 class="title is-4">@Localized["Title_DoctorDashboard"]</h4>
            </div>

            <div class="container is-flex is-justify-content-flex-end is-align-items-center is-gap-3">
                <p class="subtitle has-text-right m-0">@_authMessage</p>
                <button class="button" onclick="@OnLogout">@Localized["Button_Logout"]</button>
            </div>
        </section>

        <section>@ChildContent</section>
    </Authorized>
    <NotAuthorized>
        <h5>@Localized["Message_UnauthorizedRedirect"]</h5>
    </NotAuthorized>
</AuthorizeView>

@code {
    [Parameter, EditorRequired] 
    public RenderFragment? ChildContent { private get; set; } = null;
    
    private string _authMessage = "";
    
    protected override async Task OnInitializedAsync()
    {
        if (PatientAnalyticsAuthStateProvider.IsDoctor())
        {
            var email = PatientAnalyticsAuthStateProvider.FetchCurrentUser().UserPrincipal?.FindFirst(ClaimTypes.Email)?.Value;
            _authMessage = email ?? string.Format(Localized["Message_No_Email"]);
        }
        else
        {
            await OnLogout();
        }
    }
    
    private async Task OnLogout()
    {
        await PatientAnalyticsAuthStateProvider.Logout();
        NavigationManager.NavigateTo("/");
    }
}
@inject PatientAnalyticsAuthStateProvider PatientAnalyticsAuthStateProvider
@inject UserService UserService
@inject IStringLocalizer<Localized> Localized

@if (IsModalOpen)
{
    <div class="modal is-active">
        <div class="modal-background"></div>
        <div class="modal-card">
            <header class="modal-card-head">
                <p class="modal-card-title">@Localized["Button_UpdateUser"]</p>
                <button class="delete" aria-label="close" @onclick="CloseModal"></button>
            </header>
            <section class="modal-card-body">
                <EditForm method="post" Model="_payload" OnValidSubmit="HandleSubmit" Enhance>
                    <DataAnnotationsValidator />
                    <ValidationSummary class="text-danger" />
                    <div class="field">
                        <label class="label">@Localized["Label_Gender"]</label>
                        <InputText class="input" placeholder=@Localized["Placeholder_Gender"] @bind-Value="_payload.Gender" />
                        <ValidationMessage For="() => _payload.Gender" class="text-danger" />
                    </div>
                    <div class="field">
                        <label class="label">@Localized["Label_First_Name"]</label>
                        <InputText class="input" placeholder=@Localized["Placeholder_First_Name"] @bind-Value="_payload.FirstName" />
                        <ValidationMessage For="() => _payload.FirstName" class="text-danger" />
                    </div>
                    <div class="field">
                        <label class="label">@Localized["Label_Last_Name"]</label>
                        <InputText class="input" placeholder=@Localized["Placeholder_Last_Name"] @bind-Value="_payload.LastName" />
                        <ValidationMessage For="() => _payload.LastName" class="text-danger" />
                    </div>
                    <div class="field">
                        <label class="label">@Localized["Label_Address"]</label>
                        <InputText class="input" placeholder=@Localized["Placeholder_Address"] @bind-Value="_payload.Address" />
                        <ValidationMessage For="() => _payload.Address" class="text-danger" />
                    </div>
                    <div class="field">
                        <label class="label">@Localized["Label_DateOfBirth"]</label>
                        <InputDate class="input" placeholder=@Localized["Placeholder_DateOfBirth"] @bind-Value="_payload.DateOfBirth" />
                        <ValidationMessage For="() => _payload.DateOfBirth" class="text-danger" />
                    </div>
                    <button type="submit" class="button is-primary">@Localized["Button_Update"]</button>
                    <p class="has-text-danger">@ErrorMessage</p>
                </EditForm>
            </section>
        </div>
    </div>
}

@code {
    [Parameter] public bool IsModalOpen { private get; set; }
    [Parameter] public EventCallback OnClose { private get; set; }
    [Parameter] public EventCallback<User> OnUserEdited { private get; set; }
    [Parameter] public User User { get; set; } = null!;

    private UserAccountInfoPayload _payload = new();
    private string ErrorMessage { get; set; } = string.Empty;
    
    protected override void OnInitialized()
    {
        _payload = UserAccountInfoPayload.CreatePayloadFromUser(User);
    }

    private async Task HandleSubmit()
    {
        var token = PatientAnalyticsAuthStateProvider.FetchCurrentUser().Token;
        ErrorMessage = string.Empty;

        try
        {
            var user = await UserService.EditUserAccountInfo(token, User.Id, _payload);
            
            await OnUserEdited.InvokeAsync(user);
            
            await OnClose.InvokeAsync();
        }
        catch (HttpStatusCodeException exception)
        {
            ErrorMessage = exception.Message;
        }
    }

    private void CloseModal()
    {
        OnClose.InvokeAsync();
        _payload = new UserAccountInfoPayload();
    }
}
@page "/dashboard/doctor"
@inject PatientAnalyticsAuthStateProvider PatientAnalyticsAuthStateProvider
@inject NavigationManager NavigationManager
@inject PatientService PatientService
@inject IStringLocalizer<Localized> Localized
@rendermode InteractiveServer
@implements IAsyncDisposable

<PageTitle>@Localized["Title_DoctorDashboard"]</PageTitle>

<DoctorDashboardWrapper>
    <section class="box">
        <div class="container">
            <h2 class="title is-4">@Localized["Title_Patients"]</h2>
            <table class="table">
                <thead>
                <tr>
                    <th>@Localized["Label_ID"]</th>
                    <th>@Localized["Label_Email"]</th>
                    <th>@Localized["Label_Name"]</th>
                    <th>@Localized["Label_Gender"]</th>
                    <th>
                        <abbr title="@Localized["Label_DateOfBirth"]">
                            @Localized["Label_DateOfBirth_Abbreviated"]
                        </abbr>
                    </th>
                    <th>@Localized["Label_ViewDetails"]</th>
                </tr>
                </thead>
                <tbody>
                @foreach (var patient in _patients)
                {
                    <tr>
                        <td>@patient.Id</td>
                        <td>@patient.Email</td>
                        <td>@string.Format(Localized["Format_FullName"], patient.FirstName, patient.LastName)</td>
                        <td>@patient.Gender</td>
                        <td>@patient.DateOfBirth.ToString(Localized["DateFormatting_Date"])</td>
                        <td><button class="button" onclick="@(()=>ViewPatient(patient.Id))">@Localized["Button_View"]</button></td>
                    </tr>
                }
                </tbody>
            </table>
        </div>
    </section>
    <section class="box is-flex is-flex-direction-row is-justify-content-space-between">
        <button class="button is-success" @onclick="ToggleCreatePatient">@Localized["Button_Create_New_Patient"]</button>
        <button class="button is-success" @onclick="TestSendMessage">Test Send Message</button>
    </section>

    <PatientCreateEditModal @bind-IsModalOpen="_createPatient" OnClose="HandleModalClose" OnPatientCreated="HandlePatientCreated" />
    <HttpStatusExceptionIndicator Exception="@_exception" />
</DoctorDashboardWrapper>

@code {
    private HubConnection? _hubConnection;
    private List<Patient> _patients = new();
    private bool _createPatient = false;
    private HttpStatusCodeException? _exception;

    protected override async Task OnInitializedAsync()
    {
        if (PatientAnalyticsAuthStateProvider.IsDoctor())
        {
            FetchPatients();

            _hubConnection = new BlazorHubConnectionBuilder(
                NavigationManager.ToAbsoluteUri("/patientHub"), 
                PatientAnalyticsAuthStateProvider.FetchCurrentUser().Token)
                .Build();
            
            _hubConnection.On<Patient>("ReceiveNewPatient", (patient) =>
            {
                var existingPatient = _patients.FirstOrDefault(p => p.Id == patient.Id);
                
                if (existingPatient is null) _patients.Add(patient);
                
                StateHasChanged();
            });
            
            _hubConnection.On<Patient>("ReceiveUpdatedPatient", (patient) =>
            {
                var existingPatient = _patients.FirstOrDefault(p => p.Id == patient.Id);

                if (existingPatient is not null)
                {
                    var index = _patients.IndexOf(existingPatient);
                    if (index >= 0) _patients[index] = patient;
                }
                
                StateHasChanged();
            });
            
            _hubConnection.On<Patient>("ReceiveDeletedPatient", (patient) =>
            {
                var existingPatient = _patients.FirstOrDefault(p => p.Id == patient.Id);

                if (existingPatient is not null) _patients.Remove(existingPatient);
                
                StateHasChanged();
            });

            _hubConnection.On<string>("TestReceiveMessage", (message) =>
            {
                Console.WriteLine("Message received" + message);
                StateHasChanged();
            });

            await _hubConnection.StartAsync();
            
            Console.WriteLine(_hubConnection.State);
        }
    }

    private void ViewPatient(int id) => NavigationManager.NavigateTo($"/dashboard/doctor/patients/{id}");

    private void TestSendMessage()
    {
        if (_hubConnection is not null)
        {
            Console.WriteLine("Hub Connection: " + _hubConnection.State);
            _hubConnection.SendAsync("TestSendMessage", "Mock message");
        }
        else
        {
            Console.WriteLine("Hub Connection Not Established");
        }
    }
    
    private void FetchPatients()
    {
        try
        {
            _patients = PatientService.GetPatients(PatientAnalyticsAuthStateProvider.FetchCurrentUser().Token, null, null, null);
        }
        catch (HttpStatusCodeException exception)
        {
            _exception = exception;
        }
    }

    private void ToggleCreatePatient()
    {
        _createPatient = !_createPatient;
    }

    private void HandleModalClose()
    {
        _createPatient = false;
        StateHasChanged();
    }

    private void HandlePatientCreated(Patient newPatient)
    {
        _patients.Add(newPatient);
        StateHasChanged();
    }
    
    public async ValueTask DisposeAsync()
    {
        if (_hubConnection is not null)
        {
            await _hubConnection.DisposeAsync();
        }
    }
}
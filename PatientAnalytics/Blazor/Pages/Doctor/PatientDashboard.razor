@page "/dashboard/doctor/patients/{id:int}"
@inject IStringLocalizer<Localized> Localized
@inject PatientAnalyticsAuthStateProvider PatientAnalyticsAuthStateProvider
@inject NavigationManager NavigationManager
@inject PatientService PatientService
@inject ReportService ReportService
@inject IJSRuntime JS       

<PageTitle>@_pageTitle</PageTitle>

<DoctorDashboardWrapper>
    @if (_patient is not null)
    {
        <section class="box is-flex is-flex-direction-row is-justify-content-space-between">
            <div class="is-flex">
                <button class="button" @onclick="GoBack">@Localized["Button_Back"]</button>
            </div>
            <div class ="is-flex is-gap-3">
                <button class="button is-success" @onclick="ToggleUpdateDetails">@(_updateDetails ? Localized["Button_Cancel"] : Localized["Button_Edit"])</button>
                <button class="button is-danger is-outlined" @onclick="ShowDeleteConfirmation">@Localized["Button_Delete"]</button>
            </div>
            <div>
                <button disabled="@_isDownloadReportDisabled" class="button" @onclick="GetReport">@Localized["Button_Download_Report"]</button>
            </div>
        </section>
        
        <PersonDetailsDisplay Title="@Localized["Title_PatientDashboard"]" Person="_patient" />

        <section class="box is-flex is-flex-direction-row is-justify-content-space-between">
            <div class="buttons">
                <button class="button is-info" @onclick="ShowBloodPressure">@Localized["Button_BloodPressure"]</button>
                <button class="button is-info" @onclick="ShowHeight">@Localized["Button_Height"]</button>
                <button class="button is-info" @onclick="ShowWeight">@Localized["Button_Weight"]</button>
                <button class="button is-info" @onclick="ShowTemperature">@Localized["Button_Temperature"]</button>
            </div>
        </section>

        <PatientCreateEditModal Patient="_patient" @bind-IsModalOpen="_updateDetails" OnClose="HandleModalClose" />
    }

    <HttpStatusExceptionIndicator Exception="@_exception" />
    
    <ConfirmationModal
        Title="@Localized["Title_Delete_Patient"]"
        ConfirmButtonText="@Localized["Button_Delete"]"
        CancelButtonText="@Localized["Button_Cancel"]"
        IsVisible="@_isDeleteConfirmationVisible"
        OnConfirm="ConfirmDelete"
        OnCancel="HideDeleteConfirmation" />
</DoctorDashboardWrapper>

@code {
    [Parameter] 
    public int Id { get; set; }
    private string _pageTitle = "";
    
    private Patient? _patient;
    private bool _updateDetails;
    private bool _isDeleteConfirmationVisible;
    private bool _isDownloadReportDisabled = true;
    
    private bool _refreshing;
    private HttpStatusCodeException? _exception;
    
    protected override async Task OnInitializedAsync()
    {
        _pageTitle = Localized["Title_PatientDashboard"];
        
        if (PatientAnalyticsAuthStateProvider.IsDoctor())
        {
            await PatientAnalyticsAuthStateProvider.ServiceWrapper(
                _refreshing,
                token =>
                {
                    _patient = PatientService.GetPatientById(token, Id);
                    if (_patient is not null) 
                        _pageTitle = string.Format(Localized["Title_PatientDashboard_WithPatientName"], _patient.FirstName, _patient.LastName);
                    _isDownloadReportDisabled = false;
                },
                refreshing => _refreshing = refreshing,
                exception => _exception = exception, 
                () => NavigationManager.NavigateTo("/"));
        }
    }

    private async Task GetReport()
    {
        _isDownloadReportDisabled = true;

        await Task.Delay(300);
        
        try
        {
            if (_patient != null)
            {
                ReportResponse reportResponse = ReportService.GenerateReportForPatient(_patient);
                var reportBytes = reportResponse.fileStream;
                var fileName = reportResponse.fileName;
            
                using var stream = new MemoryStream(reportBytes);
                using var streamRef = new DotNetStreamReference(stream: stream);

                await JS.InvokeVoidAsync("downloadFileFromStream", fileName, streamRef);
            }
        }
        catch (HttpStatusCodeException exception)
        {
            _exception = exception;
        }
        
        _isDownloadReportDisabled = false;
    }

    private void ToggleUpdateDetails()
    {
        _updateDetails = !_updateDetails;
    }

    private void GoBack()
    {
        NavigationManager.NavigateTo("/dashboard/doctor");
    }

    private void ShowDeleteConfirmation()
    {
        _isDeleteConfirmationVisible = true;
    }

    private void HideDeleteConfirmation()
    {
        _isDeleteConfirmationVisible = false;
    }

    private async Task ConfirmDelete()
    {
        await PatientAnalyticsAuthStateProvider.ServiceWrapperAsync(
            _refreshing,
            async token =>
            {
                await PatientService.DeletePatient(token, Id);
                NavigationManager.NavigateTo("/dashboard/doctor");
            },
            refreshing => _refreshing = refreshing,
            exception => _exception = exception,
            () => NavigationManager.NavigateTo("/"));
    }

    private void HandleModalClose()
    {
        _updateDetails = false;
        StateHasChanged();
    }

    private void ShowBloodPressure()
    {
        NavigationManager.NavigateTo($"/patients/{Id}/bloodpressure");
    }
    private void ShowHeight()
    {
        NavigationManager.NavigateTo($"/patients/{Id}/height");
    }
    private void ShowWeight()
    {
        NavigationManager.NavigateTo($"/patients/{Id}/weight");
    }
    private void ShowTemperature()
    {
        NavigationManager.NavigateTo($"/patients/{Id}/temperature");
    }
}

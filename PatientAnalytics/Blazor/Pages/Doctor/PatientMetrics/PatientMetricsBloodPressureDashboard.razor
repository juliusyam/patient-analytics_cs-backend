@page "/patients/{id:int}/bloodpressure"
@inject IStringLocalizer<Localized> Localized
@inject PatientAnalyticsAuthStateProvider PatientAnalyticsAuthStateProvider
@inject NavigationManager NavigationManager
@inject PatientService PatientService
@inject PatientMetricsBloodPressureService PatientMetricsBloodPressureService

<PageTitle>@_pageTitle</PageTitle>

<DoctorDashboardWrapper>
    @if (_patient is not null)
    {
        <PatientDashboardWrapper Patient="@_patient" 
                                 MetricTitle=@Localized["Button_BloodPressure"]
                                 Id="@Id">
            <section class="box is-flex is-flex-direction-row">
                <div class="container" >

                    <table class="table">
                        <thead>
                            <tr>
                                <th>@Localized["Label_ID"]</th>
                                <th>@Localized["Label_BP_Systolic"]</th>
                                <th>@Localized["Label_BP_Diastolic"]</th>
                                <th>@Localized["Label_Status"]</th>
                                <th>@Localized["Label_Doctor"]</th>
                                <th>@Localized["Label_DateCreated"]</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var patient in _patientsBloodPressure)
                            {
                                <tr>
                                    <td>@patient.Id</td>
                                    <td>@patient.BloodPressureSystolic</td>
                                    <td>@patient.BloodPressureDiastolic</td>
                                    <td>@patient.Status</td>
                                    <td>@patient.Doctor?.FirstName @patient.Doctor?.LastName @patient.DoctorId</td>
                                    <td>@patient.DateCreated</td>
                                    <td>
                                        <button class="button" @onclick="() => ShowDeleteConfirmation(patient.Id)">
                                            @Localized["Button_Delete"]
                                        </button>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
                <div class="container">
                    <EditForm Model="_patientBloodPressurePayload" OnValidSubmit="HandleSubmit">
                        <DataAnnotationsValidator />
                        <ValidationSummary class="text-danger" />
                        <div class="field">
                            <label class="label">@Localized["Label_BP_Systolic"]</label>
                            <InputNumber class="input" placeholder=120 @bind-Value="_bloodPressureSystolic" />
                        </div>
                        <div class="field">
                            <label class="label">@Localized["Label_BP_Diastolic"]</label>
                            <InputNumber class="input" placeholder=60 @bind-Value="_bloodPressureDiastolic" />
                        </div>
                        <button type="submit" class="button is-primary">@Localized["Button_Create"]</button>
                        <p class="has-text-danger">@ErrorMessage</p>
                    </EditForm>
                </div>
            </section>
        </PatientDashboardWrapper>
    }

    <HttpStatusExceptionIndicator Exception="@_exception" />

    <ConfirmationModal Alert="_alertController.Alert" />
</DoctorDashboardWrapper>

@code {
    [Parameter]
    public int Id { get; set; }
    private string _pageTitle = "";
    private Patient? _patient;
    private List<PatientBloodPressure> _patientsBloodPressure = new();
    private PatientBloodPressurePayload _patientBloodPressurePayload = new();
    
    private bool _refreshing;
    private HttpStatusCodeException? _exception;

    private readonly BlazorAlertController _alertController = new();
    private string ErrorMessage { get; set; } = string.Empty;

    private int? _bloodPressureSystolic;
    private int? _bloodPressureDiastolic;
    private int _bloodPressureId;

    protected override async Task OnInitializedAsync()
    {
        if (PatientAnalyticsAuthStateProvider.IsDoctor())
        {
            await PatientAnalyticsAuthStateProvider.ServiceWrapperAsync(
                _refreshing,
                async token =>
                {
                    _patient = PatientService.GetPatientById(token, Id);
                    
                    if (_patient is not null)
                    {
                        _pageTitle = string.Format(Localized["Title_PatientDashboard_WithPatientName"], _patient.FirstName, _patient.LastName);

                        _patientsBloodPressure = await PatientMetricsBloodPressureService.GetPatientBloodPressures(token, Id);
                    }
                },
                refreshing => _refreshing = refreshing,
                exception => _exception = exception, 
                () => NavigationManager.NavigateTo("/"));
        }
        else
        {
            await PatientAnalyticsAuthStateProvider.LogoutAsync();
            NavigationManager.NavigateTo("/");
        }
    }

    private async Task HandleSubmit()
    {
        ErrorMessage = string.Empty;

        if (!_bloodPressureSystolic.HasValue)
        {
            ErrorMessage = Localized["Error_BloodPressureSystolicRequired"];
            return;
        }

        if (!_bloodPressureDiastolic.HasValue)
        {
            ErrorMessage = Localized["Error_BloodPressureDiastolicRequired"];
            return;
        }

        _patientBloodPressurePayload.SetBloodPressure(_bloodPressureSystolic.Value, _bloodPressureDiastolic.Value);

        await PatientAnalyticsAuthStateProvider.ServiceWrapperAsync(
            _refreshing,
            async token =>
            {
                var newBloodPressure = await PatientMetricsBloodPressureService.CreateEntry(token, Id, _patientBloodPressurePayload);
                _patientsBloodPressure.Add(newBloodPressure);
            },
            refreshing => _refreshing = refreshing,
            exception => ErrorMessage = exception.Message, 
            () => NavigationManager.NavigateTo("/"));
    }

    private void ShowDeleteConfirmation(int id)
    {
        _bloodPressureId = id;
        _alertController.OnDisplayAlert(
            Localized,
            "Title_DeleteRecord",
            async () => await ConfirmDelete());
    }

    private async Task ConfirmDelete()
    {
        await PatientAnalyticsAuthStateProvider.ServiceWrapperAsync(
            _refreshing,
            async token =>
            {
                await PatientMetricsBloodPressureService.DeleteEntryById(token, _bloodPressureId);
                _patientsBloodPressure.RemoveAll(bp => bp.Id == _bloodPressureId);
                
                _alertController.RemovalModal();
            },
            refreshing => _refreshing = refreshing,
            exception => _exception = exception, 
            () => NavigationManager.NavigateTo("/"));
    }
}
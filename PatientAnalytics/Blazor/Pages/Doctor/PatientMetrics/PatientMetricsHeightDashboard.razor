@page "/patients/{id:int}/height"
@inject IStringLocalizer<Localized> Localized
@inject PatientAnalyticsAuthStateProvider PatientAnalyticsAuthStateProvider
@inject NavigationManager NavigationManager
@inject PatientService PatientService
@inject PatientMetricsHeightService PatientMetricsHeightService

<PageTitle>@_pageTitle</PageTitle>

<DoctorDashboardWrapper>
    @if (_patient is not null)
    {
        <PatientDashboardWrapper Patient="@_patient"
                                 MetricTitle=@Localized["Button_Height"]
                                 Id="@Id">
            <section class="box is-flex is-flex-direction-row">
                <div class="container">
                    <div class="field">
                        <label class="label">@Localized["Label_Selected_Unit"]</label>
                        <div class="control">
                            @foreach (var unit in Enum.GetValues<HeightUnit>())
                            {
                                var displayValue = Localized[unit.ToLabel()];
                                
                                <label class="radio-button">
                                    <input type="radio"
                                           value="@displayValue"
                                           @onchange="UpdateDisplayUnit"
                                           checked="@IsSelectedUnit(unit)">
                                    <span>@displayValue</span>
                                </label>
                            }
                        </div>
                    </div>
                    <table class="table">
                        <thead>
                            <tr>
                                <th>@Localized["Label_ID"]</th>
                                <th>@Localized["Button_Height"]</th>
                                <th>@Localized["Label_Doctor"]</th>
                                <th>@Localized["Label_DateCreated"]</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var patient in _patientsHeight)
                            {
                                <tr>
                                    <td>@patient.Id</td>
                                    <td>@_selectedDisplayUnit.SelectEntryValueForUnit(patient)</td>
                                    <td>@patient.Doctor?.FirstName @patient.Doctor?.LastName</td>
                                    <td>@patient.DateCreated</td>
                                    <td>
                                        <button class="button" @onclick="() => ShowDeleteConfirmation(patient.Id)">
                                            @Localized["Button_Delete"]
                                        </button>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>

                <div class="container">
                    <EditForm Model="_formValues" OnValidSubmit="HandleSubmit">
                        <DataAnnotationsValidator />
                        <ValidationSummary class="text-danger" />
                        <div class="field">
                            <label class="label">@Localized["Button_Height"]</label>
                            <InputNumber 
                                class="input" 
                                placeholder=120 
                                @bind-Value="_formValues.Height"
                                @bind-Value:format="F2" />
                        </div>
                        <div class="field">
                            <label class="label">@Localized["Label_Unit"]</label>
                            <select class="input" placeholder=cm @bind="_formValues.Unit">
                                @foreach (var unit in Enum.GetValues<HeightUnit>())
                                {
                                    @if (unit != HeightUnit.Ft)
                                    {
                                        var displayValue = Localized[unit.ToLabel()];
                                        <option value=@displayValue>@displayValue</option>
                                    }
                                }
                            </select>
                        </div>
                        <button type="submit" class="button is-primary">@Localized["Button_Create"]</button>
                        <p class="has-text-danger">@ErrorMessage</p>
                    </EditForm>
                </div>
            </section>
        </PatientDashboardWrapper> 
    }

    <HttpStatusExceptionIndicator Exception="@_exception" />

    <ConfirmationModal Alert="_alertController.Alert" />
</DoctorDashboardWrapper>

@code {
    [Parameter]
    public int Id { get; set; }
    private string _pageTitle = "";
    private Patient? _patient;
    private List<PatientHeight> _patientsHeight = new();
    private readonly PatientHeightFormValues _formValues = new();
    
    private bool _refreshing;
    private HttpStatusCodeException? _exception;

    private readonly BlazorAlertController _alertController = new();
    private string ErrorMessage { get; set; } = string.Empty;

    private HeightUnit _selectedDisplayUnit = HeightUnit.Cm;
    private int _heightId;

    protected override async Task OnInitializedAsync()
    {
        if (PatientAnalyticsAuthStateProvider.IsDoctor())
        {
            await PatientAnalyticsAuthStateProvider.ServiceWrapperAsync(
                _refreshing,
                async token =>
                {
                    _patient = await PatientService.GetPatientById(token, Id);
                    
                    if (_patient is not null)
                    {
                        _pageTitle = string.Format(
                            Localized["Title_PatientDashboard_WithPatientName"],
                            _patient.FirstName,
                            _patient.LastName);

                        _patientsHeight = await PatientMetricsHeightService.GetPatientHeights(token, Id);
                    }
                },
                refreshing => _refreshing = refreshing,
                exception => _exception = exception, 
                () => NavigationManager.NavigateTo("/"));
        }
        else
        {
            await PatientAnalyticsAuthStateProvider.LogoutAsync();
            NavigationManager.NavigateTo("/");
        }
    }

    private async Task HandleSubmit()
    {
        ErrorMessage = string.Empty;

        if (!_formValues.Height.HasValue || _formValues.Height <= 0.0)
        {
            ErrorMessage = Localized["Error_HeightRequired"];
            return;
        }

        await PatientAnalyticsAuthStateProvider.ServiceWrapperAsync(
            _refreshing,
            async token =>
            {
                PatientHeightPayload.TryParse(_formValues, out var payload);
                
                var newHeightEntry = await PatientMetricsHeightService.CreateEntry(token, Id, payload);
                
                _patientsHeight.Insert(0, newHeightEntry);
                _formValues.Reset();
            },
            refreshing => _refreshing = refreshing,
            exception => ErrorMessage = exception.Message, 
            () => NavigationManager.NavigateTo("/"));
    }

    private void ShowDeleteConfirmation(int id)
    {
        _heightId = id;
        _alertController.OnDisplayAlert(Localized, "Title_DeleteRecord", ConfirmDelete);
    }

    private async void ConfirmDelete()
    {
        await PatientAnalyticsAuthStateProvider.ServiceWrapperAsync(
            _refreshing,
            async token =>
            {
                await PatientMetricsHeightService.DeleteEntryById(token, _heightId);
                _patientsHeight.RemoveAll(bp => bp.Id == _heightId);
                
                _alertController.RemovalModal();
            },
            refreshing => _refreshing = refreshing,
            exception => _exception = exception, 
            () => NavigationManager.NavigateTo("/"));
    }

    private bool IsSelectedUnit(HeightUnit unit)
    {
        return _selectedDisplayUnit == unit;
    }

    private void UpdateDisplayUnit(ChangeEventArgs e)
    {
        if (e.Value is not null)
        {
            Enum.TryParse(e.Value.ToString(), out HeightUnit heightUnit);
            
            _selectedDisplayUnit = heightUnit;
        }
    }
}
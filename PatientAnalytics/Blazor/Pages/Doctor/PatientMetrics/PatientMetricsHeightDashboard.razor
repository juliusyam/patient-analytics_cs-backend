@page "/patients/{id:int}/height"
@inject IStringLocalizer<Localized> Localized
@using PatientAnalytics.Services.PatientMetrics
@using PatientAnalytics.Models.PatientMetrics
@inject PatientAnalyticsAuthStateProvider PatientAnalyticsAuthStateProvider
@inject NavigationManager NavigationManager
@inject PatientService PatientService
@inject PatientMetricsHeightService PatientMetricsHeightService

<PageTitle>@_pageTitle</PageTitle>

<DoctorDashboardWrapper>
    @if (_patient is not null)
    {
        <PatientDashboardWrapper Patient="@_patient"
                                 MetricTitle=@Localized["Button_Height"]
                                 Id="@Id">
            <section class="box is-flex is-flex-direction-row">
                <div class="container">
                    <div class="field">
                        <label class="label">@Localized["Label_Selected_Unit"]</label>
                        <div class="control">
                            <label class="radio-button">
                                <input type="radio" 
                                        value="@Localized[$"Unit_Cm"]"
                                        @onchange="(e) => _selectedDisplayUnit = e.Value.ToString()" 
                                        checked="@IsSelectedUnit(@Localized[$"Unit_Cm"])">
                                <span>@Localized[$"Unit_Cm"]</span>
                            </label>
                            <label class="radio-button">
                                <input type="radio"
                                        value="@Localized[$"Unit_In"]"
                                        @onchange="(e) => _selectedDisplayUnit = e.Value.ToString()" 
                                        checked="@IsSelectedUnit(@Localized[$"Unit_In"])">
                                <span>@Localized[$"Unit_In"]</span>
                            </label>
                            <label class="radio-button">
                                <input type="radio"
                                        value="@Localized[$"Unit_Ft"]"
                                        @onchange="(e) => _selectedDisplayUnit = e.Value.ToString()" 
                                        checked="@IsSelectedUnit(@Localized[$"Unit_Ft"])">
                                <span>@Localized[$"Unit_Ft"]</span>
                            </label>
                        </div>
                    </div>
                    <table class="table">
                        <thead>
                            <tr>
                                <th>@Localized["Label_ID"]</th>
                                <th>@Localized["Button_Height"]</th>
                                <th>@Localized["Label_Doctor"]</th>
                                <th>@Localized["Label_DateCreated"]</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var patient in _patientsHeight)
                            {
                                <tr>
                                    <td>@patient.Id</td>
                                    <td>@GetHeightDisplay(patient)</td>
                                    <td>@patient.Doctor.FirstName @patient.Doctor.LastName</td>
                                    <td>@patient.DateCreated</td>
                                    <td><button class="button" @onclick="() => ShowDeleteConfirmation(patient.Id)">@Localized["Button_Delete"]</button></td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>

                <div class="container">
                    <EditForm Model="_patientHeightPayload" OnValidSubmit="HandleSubmit" Context="editFormContext">
                        <DataAnnotationsValidator />
                        <ValidationSummary class="text-danger" />
                        <div class="field">
                            <label class="label">@Localized["Button_Height"]</label>
                            <InputNumber class="input" placeholder=120 @bind-Value="_heightValue" />
                        </div>
                        <div class="field">
                            <label class="label">@Localized["Label_Unit"]</label>
                            <select class="input" placeholder=cm @bind="_selectedUnit">
                                <option value=@Localized[$"Unit_{"Cm"}"]>@Localized[$"Unit_{"Cm"}"]</option>
                                <option value=@Localized[$"Unit_{"In"}"]>@Localized[$"Unit_{"In"}"]</option>
                            </select>
                        </div>
                        <button type="submit" class="button is-primary">@Localized["Button_Create"]</button>
                        <p class="has-text-danger">@ErrorMessage</p>
                    </EditForm>
                </div>
            </section>
        </PatientDashboardWrapper> 
    }

    <HttpStatusExceptionIndicator Exception="@_exception" />
</DoctorDashboardWrapper>

<ConfirmationModal Title="@($"{Localized["Title_Delete_Patient"]} {Localized["Button_Height"]}")"
                   ConfirmButtonText="@Localized["Button_Delete"]"
                   CancelButtonText="@Localized["Button_Cancel"]"
                   IsVisible="@_isDeleteConfirmationVisible"
                   OnConfirm="ConfirmDelete"
                   OnCancel="HideDeleteConfirmation"/>

@code {
    [Parameter]
    public int Id { get; set; }
    private string _pageTitle = "";
    private Patient? _patient;
    private string _metricTitle = "";
    private List<PatientHeight> _patientsHeight = new();
    private PatientHeightPayload _patientHeightPayload = new PatientHeightPayload();
    private HttpStatusCodeException? _exception;
    private bool _isDeleteConfirmationVisible = false;
    private string ErrorMessage { get; set; } = string.Empty;

    private double? _heightValue;
    private string? _selectedUnit;
    private string _selectedDisplayUnit;
    private int _heightID;

    protected override async Task OnInitializedAsync()
    {
        _selectedUnit = @Localized["Unit_Cm"];
        _selectedDisplayUnit = @Localized["Unit_Cm"];

        if (PatientAnalyticsAuthStateProvider.IsDoctor())
        {
            var token = PatientAnalyticsAuthStateProvider.FetchCurrentUser().Token;

            try
            {
                _patient = PatientService.GetPatientById(token, Id);
                if (_patient is not null)
                {
                    _pageTitle = string.Format(Localized["Title_PatientDashboard_WithPatientName"], _patient.FirstName, _patient.LastName);

                    _patientsHeight = await PatientMetricsHeightService.GetPatientHeights(token, Id);
                }
            }
            catch (HttpStatusCodeException exception)
            {
                _exception = exception;
            }
        }
        else
        {
            await PatientAnalyticsAuthStateProvider.Logout();
            NavigationManager.NavigateTo("/");
        }
    }

    private async Task HandleSubmit()
    {
        var token = PatientAnalyticsAuthStateProvider.FetchCurrentUser().Token;
        ErrorMessage = string.Empty;

        if (!_heightValue.HasValue)
        {
            ErrorMessage = Localized["Error_HeightRequired"];
            return;
        }

        if (string.IsNullOrEmpty(_selectedUnit))
        {
            ErrorMessage = Localized["Error_UnitRequired"];
            return;
        }

        _patientHeightPayload.SetPatientHeight(_heightValue.Value, _selectedUnit);

        try
        {
            var newHeightEntry = await PatientMetricsHeightService.CreateEntry(token, _patient.Id, _patientHeightPayload);
            newHeightEntry = newHeightEntry.Formatted();
            _patientsHeight.Add(newHeightEntry);
        }
        catch (HttpStatusCodeException exception)
        {
            ErrorMessage = exception.Message;
        }
    }

    private void GoBack()
    {
        NavigationManager.NavigateTo($"/dashboard/doctor/patients/{Id}");
    }

    private void ShowDeleteConfirmation(int id)
    {
        _heightID = id;
        _isDeleteConfirmationVisible = true;
    }

    private void HideDeleteConfirmation()
    {
        _isDeleteConfirmationVisible = false;
    }

    private async Task ConfirmDelete()
    {
        var token = PatientAnalyticsAuthStateProvider.FetchCurrentUser().Token;
        try
        {
            await PatientMetricsHeightService.DeleteEntryById(token, _heightID);
            _patientsHeight.RemoveAll(bp => bp.Id == _heightID);
        }
        catch (HttpStatusCodeException exception)
        {
            _exception = exception;
        }
        finally
        {
            _isDeleteConfirmationVisible = false;
        }
    }

    private string GetHeightDisplay(PatientHeight patientHeight)
    {
        return _selectedDisplayUnit switch
        {
            var unit when unit == $"{Localized["Unit_Cm"]}" => $"{patientHeight.HeightCm:F1} {Localized["Unit_Cm"]}",
            var unit when unit == $"{Localized["Unit_In"]}" => $"{patientHeight.HeightIn:F1} {Localized["Unit_In"]}",
            var unit when unit == $"{Localized["Unit_Ft"]}" => $"{patientHeight.HeightFtFormatted} {Localized["Unit_Ft"]}",
            _ => $"{patientHeight.HeightCm:F1} {Localized["Unit_Cm"]}"
        };
    }

    private bool IsSelectedUnit(string unit)
    {
        return _selectedDisplayUnit == unit;
    }
}
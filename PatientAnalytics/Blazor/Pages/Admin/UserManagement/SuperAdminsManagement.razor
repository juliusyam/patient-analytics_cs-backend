@page "/user-management/super-admins"
@inject IStringLocalizer<Localized> Localized
@inject PatientAnalyticsAuthStateProvider PatientAnalyticsAuthStateProvider
@inject UserService UserService
@inject RegistrationService RegistrationService
@inject NavigationManager NavigationManager

<PageTitle>@Localized["Title_UserManagement_SuperAdmins"]</PageTitle>

<SuperAdminDashboardWrapper>
    <HttpStatusExceptionIndicator Exception="@_exception" />

    <div class="columns">
        <div class="column">
            <h2 class="title is-4">@Localized["Title_SuperAdmins"]</h2>
            <UsersTable Users="_superAdmins" />
        </div>
        <div class="column">
            <h2 class="title is-4">@Localized["Title_SuperAdminCreate"]</h2>
            <UserForm OnSubmit="CreateSuperAdmin" Exception="_createSuperAdminException" />
        </div>
    </div>
</SuperAdminDashboardWrapper>

@code {
    private List<User> _superAdmins = new();
    
    private bool _refreshing;
    private HttpStatusCodeException? _exception;
    private HttpStatusCodeException? _createSuperAdminException;
    
    protected override async Task OnInitializedAsync()
    {
        if (PatientAnalyticsAuthStateProvider.IsSuperAdmin())
        {
            await PatientAnalyticsAuthStateProvider.ServiceWrapper(
                _refreshing,
                token => _superAdmins = UserService.GetSuperAdmins(token),
                refreshing => _refreshing = refreshing,
                exception => _exception = exception, 
                () => NavigationManager.NavigateTo("/"));
        }
    }
    
    private async void CreateSuperAdmin((RegistrationPayload, Action)args)
    {
        await PatientAnalyticsAuthStateProvider.ServiceWrapperAsync(
            _refreshing,
            async token =>
            {
                var registerResponse = await RegistrationService.RegisterUser(token, args.Item1, "SuperAdmin");

                _createSuperAdminException = null;
            
                _superAdmins.Add(registerResponse.User);
            
                args.Item2();
            },
            refreshing => _refreshing = refreshing,
            exception => _createSuperAdminException = exception, 
            () => NavigationManager.NavigateTo("/"));
    }
}
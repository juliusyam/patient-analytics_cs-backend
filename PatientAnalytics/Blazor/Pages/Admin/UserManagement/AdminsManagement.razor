@page "/user-management/admins"
@inject IStringLocalizer<Localized> Localized
@inject PatientAnalyticsAuthStateProvider PatientAnalyticsAuthStateProvider
@inject UserService UserService
@inject RegistrationService RegistrationService
@inject NavigationManager NavigationManager

<PageTitle>@Localized["Title_UserManagement_Admins"]</PageTitle>

<AdminDashboardWrapper>
    <HttpStatusExceptionIndicator Exception="@_exception" />
    <section class="box is-flex is-flex-direction-row is-justify-content-space-between">
        <div class="is-flex">
            <button class="button" @onclick="GoBack">@Localized["Button_Back"]</button>
        </div>
    </section>

    <div class="columns">
        <div class="column">
            <h2 class="title is-4">@Localized["Title_Admins"]</h2>
            <UsersTable Users="_admins" />
        </div>
        <div class="column">
            <h2 class="title is-4">@Localized["Title_AdminCreate"]</h2>
            <UserForm OnSubmit="CreateAdmin" Exception="_createAdminException" />
        </div>
    </div>
    
    <p>@_receivedMessage</p>
</AdminDashboardWrapper>

@code {
    private List<User> _admins = new();
    
    private bool _refreshing;
    private HttpStatusCodeException? _exception;
    private HttpStatusCodeException? _createAdminException;
    private HubConnection? _hubConnection;
    private Timer? _resetTimer;
    private string _receivedMessage = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        if (PatientAnalyticsAuthStateProvider.HasAdminPrivileges())
        {
            await PatientAnalyticsAuthStateProvider.ServiceWrapper(
                _refreshing,
                token => _admins = UserService.GetAdmins(token),
                refreshing => _refreshing = refreshing,
                exception => _exception = exception, 
                () => NavigationManager.NavigateTo("/"));

            _hubConnection = PatientAnalyticsAuthStateProvider.GetHubConnection();

            _hubConnection?.On<User>("ReceiveNewAdmin", user =>
            {
                var existingAdmin = _admins.FirstOrDefault(a => a.Id == user.Id);
                if (existingAdmin is null) _admins.Add(user);
                InvokeAsync(StateHasChanged);
            });
            
            _hubConnection?.On<string>("ReceiveMessage", SetReceivedMessage);

            _hubConnection?.On<string>("ReceiveNewUser", SetReceivedMessage);
        }
    }
    
    private async void CreateAdmin((RegistrationPayload, Action)args)
    {
        await PatientAnalyticsAuthStateProvider.ServiceWrapperAsync(
            _refreshing,
            async token =>
            {
                var registerResponse = await RegistrationService.RegisterUser(token, args.Item1, "Admin");

                _createAdminException = null;
            
                _admins.Add(registerResponse.User);
            
                args.Item2();
            },
            refreshing => _refreshing = refreshing,
            exception => _createAdminException = exception, 
            () => NavigationManager.NavigateTo("/"));
    }

    private void GoBack()
    {
        NavigationManager.NavigateTo("/dashboard/admin");
    }
    
    private void SetReceivedMessage(string message)
    {
        _receivedMessage = message;
        InvokeAsync(StateHasChanged);
        _resetTimer?.Dispose();
        _resetTimer = new Timer(ResetReceivedMessage, null, TimeSpan.FromSeconds(5), Timeout.InfiniteTimeSpan);
    }
    
    private void ResetReceivedMessage(object? state)
    {
        _receivedMessage = string.Empty;
        InvokeAsync(StateHasChanged);
    }
}
@page "/user-management/doctors"
@inject IStringLocalizer<Localized> Localized
@inject PatientAnalyticsAuthStateProvider PatientAnalyticsAuthStateProvider
@inject UserService UserService
@inject RegistrationService RegistrationService
@inject NavigationManager NavigationManager

<PageTitle>@Localized["Title_UserManagement_Doctors"]</PageTitle>

<AdminDashboardWrapper>
    <HttpStatusExceptionIndicator Exception="@_exception" />
    
    <div class="columns">
        <div class="column">
            <h2 class="title is-4">@Localized["Title_Doctors"]</h2>
            <UsersTable Users="_doctors" />
        </div>
        <div class="column">
            <h2 class="title is-4">@Localized["Title_DoctorCreate"]</h2>
            <UserForm OnSubmit="CreateDoctor" Exception="_createDoctorException" />
        </div>
    </div>
</AdminDashboardWrapper>

@code {
    private List<User> _doctors = new();
    
    private bool _refreshing;
    private HttpStatusCodeException? _exception;
    private HttpStatusCodeException? _createDoctorException;
    
    protected override async Task OnInitializedAsync()
    {
        if (PatientAnalyticsAuthStateProvider.HasAdminPrivileges())
        {
            await PatientAnalyticsAuthStateProvider.ServiceWrapper(
                _refreshing,
                token => _doctors = UserService.GetDoctors(token),
                refreshing => _refreshing = refreshing,
                exception => _exception = exception, 
                () => NavigationManager.NavigateTo("/"));
        }
    }

    private async void CreateDoctor((RegistrationPayload, Action)args)
    {
        await PatientAnalyticsAuthStateProvider.ServiceWrapperAsync(
            _refreshing,
            async token =>
            {
                var registerResponse = await RegistrationService.RegisterUser(token, args.Item1, "Doctor");

                _createDoctorException = null;
            
                _doctors.Add(registerResponse.User);
            
                args.Item2();
            },
            refreshing => _refreshing = refreshing,
            exception => _createDoctorException = exception, 
            () => NavigationManager.NavigateTo("/"));
    }
}
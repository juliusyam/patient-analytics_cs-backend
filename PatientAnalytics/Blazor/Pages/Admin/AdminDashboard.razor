@page "/dashboard/admin"
@inject IStringLocalizer<Localized> Localized
@inject NavigationManager NavigationManager
@inject PatientAnalyticsAuthStateProvider PatientAnalyticsAuthStateProvider

<PageTitle>@Localized["Title_AdminDashboard"]</PageTitle>

<AdminDashboardWrapper>
    <section class="box columns">
        <AuthorizeView Roles="SuperAdmin" Context="innerContext">
            <button class="column" onclick="@(() => NavigationManager.NavigateTo("/user-management/super-admins"))">
                @Localized["Title_UserManagement_SuperAdmins"]
            </button>
        </AuthorizeView>
        <button class="column" onclick="@(() => NavigationManager.NavigateTo("/user-management/admins"))">
            @Localized["Title_UserManagement_Admins"]
        </button>
        <button class="column" onclick="@(() => NavigationManager.NavigateTo("/user-management/doctors"))">
            @Localized["Title_UserManagement_Doctors"]
        </button>
    </section>
    
    <p>@_receivedMessage</p>
</AdminDashboardWrapper>

@code {
    private HubConnection? _hubConnection;
    
    private Timer? _resetTimer;
    private string _receivedMessage = string.Empty;
    
    protected override async Task OnInitializedAsync()
    {
        if (PatientAnalyticsAuthStateProvider.HasAdminPrivileges())
        {
            var userPrincipal = PatientAnalyticsAuthStateProvider.FetchCurrentUser().UserPrincipal;
            var userRole = userPrincipal?.FindFirst(ClaimTypes.Role)?.Value;
            var userName = userPrincipal?.FindFirst(ClaimTypes.NameIdentifier)?.Value;

            _hubConnection = PatientAnalyticsAuthStateProvider.GetHubConnection();

            _hubConnection?.On<string>("ReceiveMessage", SetReceivedMessage);
            
            if (_hubConnection is not null) 
                await _hubConnection.SendAsync("AddToGroup", userName, userRole);
        }
    }

    // TODO: Convert into Notification with Web Notification API
    private void SetReceivedMessage(string message)
    {
        _receivedMessage = message;
        InvokeAsync(StateHasChanged);

        _resetTimer?.Dispose();
        _resetTimer = new Timer(ResetReceivedMessage, null, TimeSpan.FromSeconds(5), Timeout.InfiniteTimeSpan);
    }

    private void ResetReceivedMessage(object? state)
    {
        _receivedMessage = string.Empty;
        InvokeAsync(StateHasChanged);
    }
}
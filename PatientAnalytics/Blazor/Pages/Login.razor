@page "/"
@inject PatientAnalyticsAuthStateProvider PatientAnalyticsAuthStateProvider
@inject NavigationManager NavigationManager
@inject IStringLocalizer<Localized> Localized
@attribute [RequireAntiforgeryToken]
@rendermode @(new InteractiveServerRenderMode(false))

<PageTitle>@Localized["Title_Login"]</PageTitle>

<section>
    <h1 class="title">@Localized["AppTitle"]</h1>
    
    <form method="post" @onsubmit="OnSubmit" @formname="LoginForm" class="box">
        <div class="field">
            <label class="label">@Localized["Label_Username"]</label>
            <InputText type="text" class="input is-primary" @bind-Value=Model.Username placeholder="@Localized["Placeholder_Username"]"/>
        </div>
        <div class="field">
            <label class="label">@Localized["Label_Password"]</label>
            <InputText type="password" class="input is-primary" @bind-Value=Model.Password placeholder="@Localized["Placeholder_Password"]"/>
        </div>

        @if (_exception is not null)
        {
            <HttpStatusExceptionIndicator Exception="_exception" Size="Sm"/>
        }

        <button type="submit" class="button">@Localized["Button_Submit"]</button>
        <AntiforgeryToken/>
    </form>
</section>

@code {

    [SupplyParameterFromForm]
    private LoginPayload Model { get; set; } = new();
    
    private HttpStatusCodeException? _exception;
    
    protected override void OnInitialized()
    {
        Model = new LoginPayload();
        
        var userPrincipal = PatientAnalyticsAuthStateProvider.FetchCurrentUser().UserPrincipal;
        
        if (userPrincipal is not null)
        {
            var roleString = userPrincipal.FindFirst(ClaimTypes.Role)?.Value;

            var isValid = Enum.TryParse(roleString, out Role role);

            if (isValid) OnRedirect(role);
        }
    }

    private async void OnSubmit()
    {
        try
        {
            var response = await PatientAnalyticsAuthStateProvider.LoginAsync(Model);

            OnRedirect(response.User.Role);
        }
        catch (HttpStatusCodeException exception)
        {
            _exception = exception;
        }
    }

    private void OnRedirect(Role role)
    {
        switch (role)
        {
            case Role.Doctor:
                NavigationManager.NavigateTo("/dashboard/doctor");
                break;
            case Role.Admin:
            case Role.SuperAdmin:
                NavigationManager.NavigateTo("/dashboard/admin");
                break;
            default:
                _exception = new HttpStatusCodeException(
                    StatusCodes.Status422UnprocessableEntity,
                    Localized["Error_InvalidRole"]);
                break;
        }
    }
}